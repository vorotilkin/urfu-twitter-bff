openapi: 3.0.0
info:
  title: User Management API
  description: API for managing user accounts (CRUD operations).
  version: 1.0.0

servers:
  - url: http://localhost:8080/api
    description: Local server

paths:
  /register:
    post:
      summary: Create a new user
      operationId: createUser
      requestBody:
        description: Data for creating a new user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input
  /login:
    post:
      summary: Authenticate user
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: password123
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTResponse'
        '401':
          description: Invalid credentials
  /user/current:
    get:
      summary: Get current user details
      operationId: getCurrentUser
      responses:
        '200':
          description: Current user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized (user is not authenticated)
        '500':
          description: Internal server error


#    get:
#      summary: List all users
#      operationId: listUsers
#      responses:
#        '200':
#          description: A list of users
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  $ref: '#/components/schemas/UserResponse'
#
  /users/{id}:
    get:
      summary: Get user by ID
      operationId: getUser
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
#    put:
#      summary: Update user by ID
#      operationId: updateUser
#      parameters:
#        - name: id
#          in: path
#          required: true
#          description: ID of the user
#          schema:
#            type: string
#      requestBody:
#        description: Updated data for the user
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/UserUpdateRequest'
#      responses:
#        '200':
#          description: User updated successfully
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/UserResponse'
#        '404':
#          description: User not found
#    delete:
#      summary: Delete user by ID
#      operationId: deleteUser
#      parameters:
#        - name: id
#          in: path
#          required: true
#          description: ID of the user
#          schema:
#            type: string
#      responses:
#        '204':
#          description: User deleted successfully
#        '404':
#          description: User not found

components:
  schemas:
    UserCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: Full name of the user
        username:
          type: string
          description: Unique username for the user
        email:
          type: string
          format: email
          description: Email address of the user
        password:
          type: string
          format: password
          description: User password
      required:
        - name
        - username
        - email
        - password
#
#    UserUpdateRequest:
#      type: object
#      properties:
#        name:
#          type: string
#          description: Full name of the user
#        username:
#          type: string
#          description: Unique username for the user
#        email:
#          type: string
#          format: email
#          description: Email address of the user
#      required:
#        - name
#        - username
#        - email

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Unique ID of the user
        name:
          type: string
          description: Full name of the user
        username:
          type: string
          description: Unique username for the user
        email:
          type: string
          format: email
          description: Email address of the user
    JWTResponse:
      type: object
      required: [accessToken]
      properties:
        accessToken:
          type: string
          description: JWT access token
