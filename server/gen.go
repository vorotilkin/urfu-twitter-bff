// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// JWTResponse defines model for JWTResponse.
type JWTResponse struct {
	// AccessToken JWT access token
	AccessToken string `json:"accessToken"`
}

// UserCreateRequest defines model for UserCreateRequest.
type UserCreateRequest struct {
	// Email Email address of the user
	Email openapi_types.Email `json:"email"`

	// Name Full name of the user
	Name string `json:"name"`

	// Password User password
	Password string `json:"password"`

	// Username Unique username for the user
	Username string `json:"username"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	Bio        *string `json:"bio,omitempty"`
	CoverImage *string `json:"coverImage,omitempty"`

	// Email Email address of the user
	Email *openapi_types.Email `json:"email,omitempty"`

	// Id Unique ID of the user
	Id *int32 `json:"id,omitempty"`

	// Name Full name of the user
	Name         *string `json:"name,omitempty"`
	ProfileImage *string `json:"profileImage,omitempty"`

	// Username Unique username for the user
	Username *string `json:"username,omitempty"`
}

// UserUpdateRequest defines model for UserUpdateRequest.
type UserUpdateRequest struct {
	// Bio User biography
	Bio        *string `json:"bio,omitempty"`
	CoverImage *string `json:"coverImage,omitempty"`

	// Name Full name of the user
	Name         string  `json:"name"`
	ProfileImage *string `json:"profileImage,omitempty"`

	// Username Unique username for the user
	Username string `json:"username"`
}

// LoginJSONBody defines parameters for Login.
type LoginJSONBody struct {
	Email    *openapi_types.Email `json:"email,omitempty"`
	Password *string              `json:"password,omitempty"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody LoginJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = UserCreateRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UserUpdateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authenticate user
	// (POST /login)
	Login(ctx echo.Context) error
	// Logout user
	// (POST /logout)
	Logout(ctx echo.Context) error
	// Create a new user
	// (POST /register)
	CreateUser(ctx echo.Context) error
	// List all users
	// (GET /users)
	ListUsers(ctx echo.Context) error
	// Get current user details
	// (GET /users/current)
	GetCurrentUser(ctx echo.Context) error
	// Update user
	// (PUT /users/current)
	UpdateUser(ctx echo.Context) error
	// Get user by ID
	// (GET /users/{id})
	GetUser(ctx echo.Context, id int32) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// Logout converts echo context to params.
func (w *ServerInterfaceWrapper) Logout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Logout(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// ListUsers converts echo context to params.
func (w *ServerInterfaceWrapper) ListUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListUsers(ctx)
	return err
}

// GetCurrentUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetCurrentUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCurrentUser(ctx)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUser(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/login", wrapper.Login)
	router.POST(baseURL+"/logout", wrapper.Logout)
	router.POST(baseURL+"/register", wrapper.CreateUser)
	router.GET(baseURL+"/users", wrapper.ListUsers)
	router.GET(baseURL+"/users/current", wrapper.GetCurrentUser)
	router.PUT(baseURL+"/users/current", wrapper.UpdateUser)
	router.GET(baseURL+"/users/:id", wrapper.GetUser)

}
